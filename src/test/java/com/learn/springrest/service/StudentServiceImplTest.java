package com.learn.springrest.service;

import com.learn.springrest.dto.StudentDTO;
import com.learn.springrest.model.Student;
import com.learn.springrest.repository.StudentRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;


@ExtendWith(MockitoExtension.class)
class StudentServiceImplTest {

    // This class is used to test the StudentServiceImpl class
    //
    @InjectMocks
    private StudentServiceImpl studentService;

    // Dependency to be mocked
    @Mock
    private static StudentRepository repository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

//    @Test
//    void testCreateStudent() {
//        // Implement test logic here
//        StudentDTO studentDTO = new StudentDTO(
//                null, // ID will be generated by the database
//                "John",
//                "Doe",
//                "teststudent@gmail.com",
//                null // Assuming courses is a Set<CourseDTO> and can be null for creation
//        );
//
//        Student student = Student.builder()
//                .id(null)
//                .firstName("John")
//                .lastName("Doe")
//                .email("teststudent@gmail.com")
//                .courses(null)
//                .reviews(null)
//                .build();
//
//        // Mock the repository's save method to return the created student
//        when(repository.save(any(Student.class))).thenReturn(student);
//
//
//        // When
//        StudentDTO createdStudent = studentService.createStudent(studentDTO);
//
//
//        // Verify the result
//        assertNotNull(createdStudent);
//        assertEquals(studentDTO.getFirstName(), createdStudent.getFirstName());
//        assertEquals(studentDTO.getLastName(), createdStudent.getLastName());
//
//        verify(repository, times(1)).save(any(Student.class));
//        // Verify that the save method was called exactly once with any Student object
//        verifyNoMoreInteractions(repository);
//
//    }
    @Test
    void TestSum() {
        // This is a simple test to check if the test framework is working
        int a = 5;
        int b = 10;
        int sum = a + b;
        assertEquals(15, sum);
    }

}